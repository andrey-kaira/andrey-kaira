<!--XAML-->
    <Window x:Class="WpfApp5.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp5"
        mc:Ignorable="d"
        Title="Парсер Видео" Height="450" Width="621.352"
        MinHeight="450" MinWidth="621">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="360*"/>
            <RowDefinition Height="59*" MaxHeight="59" MinHeight="59"/>
        </Grid.RowDefinitions>
        <Border BorderThickness="4" BorderBrush="Black" Background="LightCyan">
            <ListBox Name="NameList" Margin="10" BorderThickness="3" BorderBrush="Black"></ListBox>
        </Border>
        <Border Grid.Row="1" BorderThickness="4" BorderBrush="Black" Background="Bisque">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="1*"/>
                </Grid.ColumnDefinitions>
                <Button  Margin="10" Name="Parser" Click="Parser_Click">Parse</Button>
                <CheckBox Margin="10" Name="SortCheck" Grid.Column="2" Checked="Sort_Checked" Unchecked="Sort_Unchecked" VerticalAlignment="Center">Sort</CheckBox>
            </Grid>

        </Border>

    </Grid>
</Window>

==================================================================================================================================================================

using CsQuery;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfApp5
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();  
        }

        class VideoContent
        {
            public string Name { get; set; }

            public string time { get; set; }
        }

        List<VideoContent> vc = new List<VideoContent>();

        private void Parser_Click(object sender, RoutedEventArgs e)
        {
            vc.Clear();
            SortCheck.IsChecked = false;

            Uri uri = new Uri("https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/");

            WebClient _webClient = new WebClient { Encoding = Encoding.UTF8 };
            _webClient.Headers["User-Agent"] = "Mozilla/5.0";

            string html = _webClient.DownloadString(uri);

            CQ cq = CQ.Create(html);
            
            foreach (IDomObject obj in cq.Find(".lecture-container.lecture-container--preview a"))
                if (!string.IsNullOrWhiteSpace(obj.InnerText))
                    vc.Add(new VideoContent() { Name =  obj.InnerText }) ;

            int i = 0;
            foreach (IDomObject obj in cq.Find(".lecture-container.lecture-container--preview span"))
            {
                if (!string.IsNullOrWhiteSpace(obj.InnerText)&& obj.InnerText!="Preview")
                {
                   vc[i].time = obj.InnerText;
                    ++i;
                }
            }
            ListPrint();



        }

        private void SortListPrint(SortedList<string, string> keyValuePairs)
        {
            NameList.Items.Clear();
            foreach (var item in keyValuePairs)
            {
                StackPanel stackPanel = new StackPanel();
                stackPanel.Children.Add(new TextBlock() { Text = item.Value, FontSize = 14 });
                stackPanel.Children.Add(new TextBlock() { Text = item.Key, Foreground = Brushes.Blue, FontSize = 10 });
                NameList.Items.Add(stackPanel);
            }
        }

        private void ListPrint()
        {
            NameList.Items.Clear();
            foreach (var item in vc)
            {
                StackPanel stackPanel = new StackPanel();
                stackPanel.Children.Add(new TextBlock() { Text = item.Name, FontSize = 14 });
                stackPanel.Children.Add(new TextBlock() { Text = item.time, Foreground = Brushes.Blue, FontSize = 10 });
                NameList.Items.Add(stackPanel);
            }
        }

        private void Sort_Checked(object sender, RoutedEventArgs e)
        {
            SortedList<string, string> keyValuePairs = new SortedList<string, string>();
            foreach (var item in vc)
                keyValuePairs.Add(item.time, item.Name);

            SortListPrint(keyValuePairs);
        }

       

        private void Sort_Unchecked(object sender, RoutedEventArgs e)
        {
            ListPrint();
        }
    }
}
