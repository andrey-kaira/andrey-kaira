<XAML>

<Window x:Class="HorseRun.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:HorseRun"
        mc:Ignorable="d"
        Title="Ход конем" Height="500" Width="800" SizeChanged="Window_SizeChanged" 
        MinWidth="800" MinHeight="500">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="8*"/>
            <ColumnDefinition MaxWidth="216" MinWidth="216" Width="3*"/>
        </Grid.ColumnDefinitions>
        <Border Name="FieldBorder" BorderThickness="2" BorderBrush="Black">
            <Grid>
                <WrapPanel Name="Field"/>
                <Image HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="Hidden" Name="Horse" Source="horse.png" Width="100" Height="100"></Image>
                
            </Grid>
        </Border>
        <Border BorderThickness="2" BorderBrush="Black" Background="Bisque" Grid.Column="1">
            <StackPanel VerticalAlignment="Center">
                <TextBlock HorizontalAlignment="Center" Name="Map"></TextBlock>
                <GroupBox Header="Скорость игры">
                    <Slider Margin="10,0" Minimum="1" Maximum="10" ValueChanged="Slider_ValueChanged"></Slider>
                </GroupBox>
                
                
                <GroupBox  Header="Поведение коня">
                    <StackPanel IsEnabled="False" Name="HorsePanel">

                        <Button Name="HorseSpawn" Click="HorseSpawn_Click" >Заспаунить коня</Button>
                        <Button IsEnabled="False" Margin="0,5" Name="Start" Click="Start_Click" >Пуск</Button>
                    </StackPanel>
                    
                </GroupBox>
                <GroupBox Header="Размер поля">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBox Name="SizeX" Width="90" TextChanged="Size_TextChanged" MaxLength="2"></TextBox>
                            <TextBlock Margin="5,0"> X</TextBlock>
                            <TextBox Name="SizeY" Width="90" TextChanged="Size_TextChanged" MaxLength="2"></TextBox>
                        </StackPanel>
                        <TextBlock Foreground="Green" Name="MinLength">Размер не может быть меньше 5</TextBlock>
                        <TextBlock Foreground="Green" Name="MaxLength">Размер не может быть больше 25</TextBlock>
                        <Button Name="CreateButton" IsEnabled="False" Margin="0,5,0,0" Click="CreateButton_Click">Создать</Button>
                    </StackPanel>
                   
                </GroupBox>
            </StackPanel>
        </Border>
    </Grid>
</Window>


===============================================================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace HorseRun
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Random random = new Random();
        DispatcherTimer timer = new DispatcherTimer();
        public MainWindow()
        {
            InitializeComponent();
            SizeX.Text = "8";
            SizeY.Text = "8";
            timer.Tick += new EventHandler(timer_Tick);
        }

        int speed = 1;

        private string IsTextAllowed(string text)
        {
            Regex inputRegex = new Regex(@"[0-9]");
            string newString = null;
            foreach (var item in text)
            {
                Match match = inputRegex.Match(item.ToString());
                if (match.Success)
                {
                    newString += item;
                }
            }
            return newString;
        }

        private void Size_TextChanged(object sender, TextChangedEventArgs e)
        {
            string text = IsTextAllowed((sender as TextBox).Text);
            SizeX.Text = text;
            SizeY.Text = text;
            if(text==null||int.Parse(text)<5)
                MinLength.Foreground = Brushes.Red;
            else
                MinLength.Foreground = Brushes.Green;
            if (text == null || int.Parse(text) > 25)
                MaxLength.Foreground = Brushes.Red;
            else
                MaxLength.Foreground = Brushes.Green;

            if(MinLength.Foreground==Brushes.Red || MaxLength.Foreground==Brushes.Red)
                CreateButton.IsEnabled = false;
            else
                CreateButton.IsEnabled = true;
        }

        private void CreateButton_Click(object sender, RoutedEventArgs e)
        {
            HorseSpawn.IsEnabled = true;
            HorsePanel.IsEnabled = true;
            Horse.Visibility = Visibility.Hidden;
            Start.IsEnabled = false;
            timer.Stop();
            targetX = -1;
            targetY = -1;
            int size = int.Parse(SizeX.Text);
            int color = 0;
            int line = 0;
            Field.Background = Brushes.Gray;
            Field.Children.Clear();
            myArr = new List<int>();
            for (int i = 0; i < (int)size; i++)
            {
                for (int j = 0; j < (int)size; j++)
                {
                    switch (i % 4)
                    {
                        case 0:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr.Add(1);
                                    break;
                                case 1:
                                    myArr.Add(2);
                                    break;
                                case 2:
                                    myArr.Add(3);
                                    break;
                                case 3:
                                    myArr.Add(4);
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case 1:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr.Add(3);
                                    break;
                                case 1:
                                    myArr.Add(4);
                                    break;
                                case 2:
                                    myArr.Add(1);
                                    break;
                                case 3:
                                    myArr.Add(2);
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case 2:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr.Add(2);
                                    break;
                                case 1:
                                    myArr.Add(1);
                                    break;
                                case 2:
                                    myArr.Add(4);
                                    break;
                                case 3:
                                    myArr.Add(3);
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case 3:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr.Add(4);
                                    break;
                                case 1:
                                    myArr.Add(3);
                                    break;
                                case 2:
                                    myArr.Add(2);
                                    break;
                                case 3:
                                    myArr.Add(1);
                                    break;
                                default:
                                    break;
                            }
                            break;
                    }

                }
            }
            for (int i = size / 4; i < size - (size / 4); i++)
            {
                for (int j = size / 4; j < size - (size / 4); j++)
                {
                    switch ((i - size / 4) % 4)
                    {
                        case 0:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr[j + (i * size)] = 5;
                                    break;
                                case 1:
                                    myArr[j + (i * size)] = 6;
                                    break;
                                case 2:
                                    myArr[j + (i * size)] = 7;
                                    break;
                                case 3:
                                    myArr[j + (i * size)] = 8;
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case 1:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr[j + (i * size)] = 7;
                                    break;
                                case 1:
                                    myArr[j + (i * size)] = 8;
                                    break;
                                case 2:
                                    myArr[j + (i * size)] = 5;
                                    break;
                                case 3:
                                    myArr[j + (i * size)] = 6;
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case 2:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr[j + (i * size)] = 6;
                                    break;
                                case 1:
                                    myArr[j + (i * size)] = 5;
                                    break;
                                case 2:
                                    myArr[j + (i * size)] = 8;
                                    break;
                                case 3:
                                    myArr[j + (i * size)] = 7;
                                    break;
                                default:
                                    break;
                            }
                            break;
                        case 3:
                            switch (j % 4)
                            {
                                case 0:
                                    myArr[j + (i * size)] = 8;
                                    break;
                                case 1:
                                    myArr[j + (i * size)] = 7;
                                    break;
                                case 2:
                                    myArr[j + (i * size)] = 6;
                                    break;
                                case 3:
                                    myArr[j + (i * size)] = 5;
                                    break;
                                default:
                                    break;
                            }
                            break;
                    }
                }
            }


            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    Border border = new Border();
                    border.Width = (FieldBorder.ActualWidth / size)-4.0/size;
                    border.Height = (FieldBorder.ActualHeight / size) - 4.0 / size;
                    if (color % 2 == 0)
                        if(line%2==0)
                            border.Background = Brushes.White;
                        else
                            border.Background = Brushes.Black;
                    if (color % 2 == 1)
                        if (line % 2 == 0)
                            border.Background = Brushes.Black;
                        else
                            border.Background = Brushes.White;
                    ++color;
                    if (color == size)
                    {
                        ++line;
                        color = 0;
                    }
                    Field.Children.Add(border);
                }
            }
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (Field.Children == null)
                return;
            int size = (int)Math.Sqrt(Field.Children.Count);
            foreach (Border border in Field.Children)
            {
                border.Width = (FieldBorder.ActualWidth / size) - 4.0 / size;
                border.Height = (FieldBorder.ActualHeight / size) - 4.0 / size;

                this.Title = Field.ActualHeight.ToString();
            }
        }

        private void Border_MouseDown(object sender, MouseButtonEventArgs e)
        {
            (sender as Border).Visibility = Visibility.Hidden;
        }

        private void HorseSpawn_Click(object sender, RoutedEventArgs e)
        {
            
            Start.IsEnabled = true;
            int size = (int)Math.Sqrt(Field.Children.Count);
            Horse.Visibility = Visibility.Visible;
            Horse.Width = (FieldBorder.ActualWidth / size) - 4.0 / size;
            Horse.Height = (FieldBorder.ActualHeight / size) - 4.0 / size;
            Horse.Margin = new Thickness((double)random.Next(size) * Horse.Width, (double)random.Next(size) * Horse.Height, 0,0);
        }

        private void Start_Click(object sender, RoutedEventArgs e)
        {
            int size = (int)Math.Sqrt(Field.Children.Count);
            Start.IsEnabled = false;
            HorseSpawn.IsEnabled = false;
            
            timer.Interval = new TimeSpan(0, 0, 0, 0, 1);
            timer.Start();
        }

        double targetX = -1;
        double targetY = -1;

        List<int> myArr = null;
        private void timer_Tick(object sender, EventArgs e)
        {

            double size = (double)Math.Sqrt(Field.Children.Count);
            double X = ((double)Horse.Margin.Left / (double)Horse.Width);
            double Y = ((double)Horse.Margin.Top / (double)Horse.Height);

            string text = "";
            int lenth = 0;
            foreach (var item in myArr)
            {
                text += item + "  ";
                
                ++lenth;
                if(lenth==size)
                {
                    lenth = 0;
                    text += "\n";
                }
            }
            Map.Text = text;
            if (targetX == -1)
            {

                (Field.Children[(int)(X + (size * Y))] as Border).Visibility = Visibility.Hidden;

                if (X >= size / 4 && X <= size - (size / 4) && Y - 1 > size / 4 && Y < size - (size / 4))
                {
                    if (stepLeftDown(X, Y, size, 1, 2)) ;
                    else if (stepRightDown(X, Y, size, 1, 2)) ;
                    else if (stepLeftUp(X, Y, size, 1, 2)) ;
                    else if (stepRightUp(X, Y, size, 1, 2)) ;

                    else if (stepRightDown(X, Y, size, 2, 1)) ;
                    else if (stepRightUp(X, Y, size, 2, 1)) ;
                    else if (stepLeftUp(X, Y, size, 2, 1)) ;
                    else if (stepLeftDown(X, Y, size, 2, 1)) ;
                    else
                    {
                        if (X - 1 >= 0 && Y + 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] >= 1 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 4 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X - 1;
                            targetY = Y + 2;
                        }
                        else if (X + 1 < size && Y + 2 <  size && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] >= 1 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 4 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y + 2;
                        }
                        else if (X - 1 >= 0 && Y - 2 >= 0 && Y - 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] >= 1 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 4 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {
                            targetX = X - 1;
                            targetY = Y - 2;
                        }
                        else if (X + 1 < size && Y - 2 >= 0 && Y - 2 < size && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] >= 1 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 4 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y - 2;
                        }

                        else if (X - 2 >= 0 && Y + 1 < size && Y + 1 < size && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] >= 1 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 4 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X - 2;
                            targetY = Y + 1;
                        }
                        else if (X + 2 < size && Y + 1 < size && Y + 1 < size && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] >= 1 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 4 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y + 1;
                        }
                        else if (X - 2 >= 0 && Y - 1 >= 0 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] >= 1 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 4 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {
                            targetX = X - 2;
                            targetY = Y - 1;
                        }
                        else if (X + 2 < size && Y - 1 >= 0 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] >= 1 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 4 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y - 1;
                        }

                        else if (X - 1 >= 0 && Y + 2 < size && Y + 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] > 4 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 8 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X - 1;
                            targetY = Y + 2;
                        }
                        else if (X + 1 < size && Y + 2 < size && Y + 2 < size && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] > 4 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 8 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y + 2;
                        }
                        else if (X - 1 >= 0 && Y - 2 >= 0 && Y - 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] > 4 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 8 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {

                            targetX = X - 1;
                            targetY = Y - 2;
                        }
                        else if (X + 1 < size && Y - 2 >= 0 && Y - 2 < size && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] > 4 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 8 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y - 2;
                        }
                        else if (X - 2 >= 0 && Y + 1 < size && Y + 1 < size && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] > 4 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 8 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X - 2;
                            targetY = Y + 1;
                        }
                        else if (X + 2 < size && Y + 1 < size && Y + 1 < size && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] > 4 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 8 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y + 1;
                        }
                        else if (X - 2 >= 0 && Y - 1 >= 0 && Y - 1 < size && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] > 4 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 8 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {

                            targetX = X - 2;
                            targetY = Y - 1;
                        }
                        else if (X + 2 < size && Y - 1 >= 0 && Y - 1 < size && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] > 4 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 8 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y - 1;
                        }
                        else
                        {

                            timer.Stop();
                            bool victory = true;
                            foreach (var item in myArr)
                                if (item != 0)
                                    victory = false;
                            if (victory == true)
                                MessageBox.Show("Конь закончил прогулку!");
                            else
                                MessageBox.Show("Конь заблудился! ;(");
                        }
                    }
                }
                else
                {
                    if (stepLeftDown(X, Y, size, 1, 2)) ;
                    else if (stepRightDown(X, Y, size, 1, 2)) ;
                    else if (stepLeftUp(X, Y, size, 1, 2)) ;
                    else if (stepRightUp(X, Y, size, 1, 2)) ;

                    else if (stepRightDown(X, Y, size, 2, 1)) ;
                    else if (stepRightUp(X, Y, size, 2, 1)) ;
                    else if (stepLeftUp(X, Y, size, 2, 1)) ;
                    else if (stepLeftDown(X, Y, size, 2, 1)) ;
                    else
                    {
                        if (X - 1 >= 0 && Y + 2 < size && Y + 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] > 4 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 8 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X - 1;
                            targetY = Y + 2;
                        }
                        else if (X + 1 < size && Y + 2 < size && Y + 2 < size && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] > 4 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 8 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y + 2;
                        }
                        else if (X - 1 >= 0 && Y - 2 >= 0 && Y - 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] > 4&& myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 8&& myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {

                            targetX = X - 1;
                            targetY = Y - 2;
                        }
                        else if (X + 1 < size && Y - 2 >= 0 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] > 4 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 8 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y - 2;
                        }
                        else if(X - 2 >= 0 && Y + 1 < size && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] > 4 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 8 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X - 2;
                            targetY = Y + 1;
                        }
                        else if (X + 2 < size && Y + 1 < size  && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] > 4 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 8 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y + 1;
                        }
                        else if (X - 2 >= 0 && Y - 1 >= 0 && Y - 1 < size && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] > 4 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 8 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {

                            targetX = X - 2;
                            targetY = Y - 1;
                        }
                        else if (X + 2 < size && Y - 1 >= 0 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] > 4 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 8 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y - 1;
                        }


                        else if(X - 1 >= 0 && Y + 2 < size && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] >= 1 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 4 && myArr[(int)X - 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X - 1;
                            targetY = Y + 2;
                        }
                        else if (X + 1 < size && Y + 2 < size  && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] >= 1 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] <= 4 && myArr[(int)X + 1 + (((int)Y * (int)size) + (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y + 2;
                        }
                        else if (X - 1 >= 0 && Y - 2 >= 0 &&  myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] >= 1 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 4 && myArr[(int)X - 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {
                            targetX = X - 1;
                            targetY = Y - 2;
                        }
                        else if (X + 1 <size && Y - 2 >= 0 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] >= 1 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] <= 4 && myArr[(int)X + 1 + (((int)Y * (int)size) - (2 * (int)size))] != 0)
                        {
                            targetX = X + 1;
                            targetY = Y - 2;
                        }

                        else if (X - 2 >= 0 && Y + 1 < size  && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] >= 1 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 4 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X - 2;
                            targetY = Y + 1;
                        }
                        else if (X + 2 < size && Y + 1 < size && Y + 1 < size && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] >= 1 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] <= 4 && myArr[(int)X + 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y + 1;
                        }
                        else if (X - 2 >= 0 && Y - 1 >= 0 && Y - 1 < size && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] >= 1 && myArr[(int)X - 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 4 && myArr[(int)X - 2 + (((int)Y * (int)size) + (1 * (int)size))] != 0)
                        {
                            targetX = X - 2;
                            targetY = Y - 1;
                        }
                        else if (X + 2 < size && Y - 1 >= 0 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] >= 1 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] <= 4 && myArr[(int)X + 2 + (((int)Y * (int)size) - (1 * (int)size))] != 0)
                        {
                            targetX = X + 2;
                            targetY = Y - 1;
                        }
                        else
                        {
                            timer.Stop();
                            myArr[(int)X + ((int)Y * (int)size)] = 0;
                            bool victory = true;
                            foreach (var item in myArr)
                                if (item != 0)
                                    victory = false;
                            if (victory == true)
                                MessageBox.Show("Конь закончил прогулку!");
                            else
                                MessageBox.Show("Конь заблудился! ;(");
                            
                        }
                    }
                }

                myArr[(int)X + ((int)Y * (int)size)] = 0;

            }
            else if ((int)targetX < X || (int)targetX > X + 0.01 * size * speed)
            {
                if (X < targetX)
                    Horse.Margin = new Thickness(Horse.Margin.Left + 2*speed, Horse.Margin.Top, Horse.Margin.Right, Horse.Margin.Bottom);
                else
                    Horse.Margin = new Thickness(Horse.Margin.Left - 2 * speed, Horse.Margin.Top, Horse.Margin.Right, Horse.Margin.Bottom);

            }
            else if (targetY < Y - 0.01 * size * speed || targetY > Y)
            {
                if (Y < targetY)
                    Horse.Margin = new Thickness(Horse.Margin.Left, Horse.Margin.Top + 2 * speed, Horse.Margin.Right, Horse.Margin.Bottom);
                else
                    Horse.Margin = new Thickness(Horse.Margin.Left, Horse.Margin.Top - 2 * speed, Horse.Margin.Right, Horse.Margin.Bottom);
            }
            else
            {
                Horse.Margin = new Thickness(Horse.Width * targetX, Horse.Height * targetY, Horse.Margin.Right, Horse.Margin.Bottom);
                targetX = -1;
                targetY = -1;
            }
        }

        private bool stepLeftDown(double X, double Y, double size,int i,int j)
        {
            
            if (X + i < size && Y + j < size && myArr[(int)X + ((int)Y * (int)size)] == myArr[(int)X+i + (((int)Y * (int)size)+ (j * (int)size))] && myArr[(int)X + i + (((int)Y * (int)size) + (j * (int)size))] != 0)
            {
                
                targetX = X + i;
                targetY = Y + j;
                return true;
            }
            return false;
        }
        private bool stepRightDown(double X, double Y, double size, int i, int j)
        {
            if (X - i >= 0 && Y + j < size && Y + j < size && myArr[(int)X + ((int)Y * (int)size)] == myArr[(int)X - i + (((int)Y * (int)size) + (j * (int)size))] && myArr[(int)X - i + (((int)Y * (int)size) + (j * (int)size))] != 0)
            {

                targetX = X - i;
                targetY = Y + j;
                return true;
            }
            return false;
        }
        private bool stepLeftUp(double X, double Y, double size, int i, int j)
        {
            if (X + i < size && Y - j >= 0 && myArr[(int)X + ((int)Y * (int)size)] == myArr[((int)X + i) + (((int)Y * (int)size) - (j*(int)size))] && myArr[(int)X + i + (((int)Y * (int)size) - (j * (int)size))] != 0)
            {

                targetX = X + i;
                targetY = Y - j;
                return true;
            }
            return false;
        }
        private bool stepRightUp(double X, double Y, double size, int i, int j)
        {
            if (X - i >= 0 && Y - j >= 0 && myArr[(int)X + ((int)Y * (int)size)] == myArr[(int)X - i + (((int)Y * (int)size) - (j * (int)size))] && myArr[(int)X - i + (((int)Y * (int)size) - (j * (int)size))] != 0)
            {

                targetX = X - i;
                targetY = Y - j;
                return true;
            }
            return false;
        }

        private void Slider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            speed = (int)(sender as Slider).Value;
        }
    }
}
